{
  "name": "redux-thunk",
  "version": "3.1.0",
  "license": "MIT",
  "description": "Thunk middleware for Redux.",
  "repository": {
    "type": "git",
    "url": "github:reduxjs/redux-thunk"
  },
  "bugs": {
    "url": "https://github.com/reduxjs/redux-thunk/issues"
  },
  "homepage": "https://github.com/reduxjs/redux-thunk",
  "keywords": [
    "redux",
    "thunk",
    "middleware",
    "redux-middleware",
    "flux"
  ],
  "author": {
    "name": "Dan Abramov",
    "email": "dan.abramov@me.com"
  },
  "main": "dist/cjs/redux-thunk.cjs",
  "module": "dist/redux-thunk.legacy-esm.js",
  "types": "dist/redux-thunk.d.ts",
  "exports": {
    "./package.json": "./package.json",
    ".": {
      "types": "./dist/redux-thunk.d.ts",
      "import": "./dist/redux-thunk.mjs",
      "default": "./dist/cjs/redux-thunk.cjs"
    }
  },
  "sideEffects": false,
  "files": [
    "dist",
    "src",
    "extend-redux.d.ts"
  ],
  "scripts": {
    "clean": "rimraf lib dist es",
    "prepublishOnly": "yarn clean && yarn lint && yarn test && yarn build",
    "format": "prettier --write \"{src,test,typescript_test}/**/*.{js,ts}\"",
    "format:check": "prettier --check \"{src,test,typescript_test}/**/*.{js,ts}\"",
    "lint": "eslint \"{src,test,typescript_test}/**/*.{js,ts}\"",
    "test": "vitest run",
    "test:cov": "vitest run --coverage",
    "test:typescript": "tsc --noEmit -p typescript_test/tsconfig.json",
    "build": "tsup",
    "prepack": "yarn build"
  },
  "peerDependencies": {
    "redux": "^5.0.0"
  },
  "devDependencies": {
    "@typescript-eslint/eslint-plugin": "^5.1.0",
    "@typescript-eslint/parser": "^5.1.0",
    "cross-env": "^7.0.3",
    "eslint": "^7.32.0",
    "eslint-config-prettier": "^8.3.0",
    "prettier": "^2.4.1",
    "redux": "^5",
    "rimraf": "^3.0.2",
    "tsup": "7.0.0",
    "typescript": "^5.0",
    "vitest": "^0.32.0"
  },
  "readme": "# Redux Thunk\r\n\r\nThunk [middleware](https://redux.js.org/tutorials/fundamentals/part-4-store#middleware) for Redux. It allows writing functions with logic inside that can interact with a Redux store's `dispatch` and `getState` methods.\r\n\r\nFor complete usage instructions and useful patterns, see the [Redux docs **Writing Logic with Thunks** page](https://redux.js.org/usage/writing-logic-thunks).\r\n\r\n![GitHub Workflow Status](https://img.shields.io/github/actions/workflow/status/reduxjs/redux-thunk/test.yml?branch=master)\r\n[![npm version](https://img.shields.io/npm/v/redux-thunk.svg?style=flat-square)](https://www.npmjs.com/package/redux-thunk)\r\n[![npm downloads](https://img.shields.io/npm/dm/redux-thunk.svg?style=flat-square)](https://www.npmjs.com/package/redux-thunk)\r\n\r\n## Installation and Setup\r\n\r\n### Redux Toolkit\r\n\r\nIf you're using [our official Redux Toolkit package](https://redux-toolkit.js.org) as recommended, there's nothing to install - RTK's `configureStore` API already adds the thunk middleware by default:\r\n\r\n```js\r\nimport { configureStore } from '@reduxjs/toolkit'\r\n\r\nimport todosReducer from './features/todos/todosSlice'\r\nimport filtersReducer from './features/filters/filtersSlice'\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    todos: todosReducer,\r\n    filters: filtersReducer\r\n  }\r\n})\r\n\r\n// The thunk middleware was automatically added\r\n```\r\n\r\n### Manual Setup\r\n\r\nIf you're using the basic Redux `createStore` API and need to set this up manually, first add the `redux-thunk` package:\r\n\r\n```sh\r\nnpm install redux-thunk\r\n\r\nyarn add redux-thunk\r\n```\r\n\r\nThe thunk middleware is the default export.\r\n\r\n<details>\r\n<summary><b>More Details: Importing the thunk middleware</b></summary>\r\n\r\nIf you're using ES modules:\r\n\r\n```js\r\nimport thunk from 'redux-thunk' // no changes here 😀\r\n```\r\n\r\nIf you use Redux Thunk 2.x in a CommonJS environment,\r\n[don’t forget to add `.default` to your import](https://github.com/reduxjs/redux-thunk/releases/tag/v2.0.0):\r\n\r\n```diff\r\n- const thunk = require('redux-thunk')\r\n+ const thunk = require('redux-thunk').default\r\n```\r\n\r\nAdditionally, since 2.x, we also support a\r\n[UMD build](https://unpkg.com/redux-thunk/dist/redux-thunk.min.js) for use as a global script tag:\r\n\r\n```js\r\nconst ReduxThunk = window.ReduxThunk\r\n```\r\n\r\n</details>\r\n\r\nThen, to enable Redux Thunk, use\r\n[`applyMiddleware()`](https://redux.js.org/api/applymiddleware):\r\n\r\n```js\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport rootReducer from './reducers/index'\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk))\r\n```\r\n\r\n### Injecting a Custom Argument\r\n\r\nSince 2.1.0, Redux Thunk supports injecting a custom argument into the thunk middleware. This is typically useful for cases like using an API service layer that could be swapped out for a mock service in tests.\r\n\r\nFor Redux Toolkit, the `getDefaultMiddleware` callback inside of `configureStore` lets you pass in a custom `extraArgument`:\r\n\r\n```js\r\nimport { configureStore } from '@reduxjs/toolkit'\r\nimport rootReducer from './reducer'\r\nimport { myCustomApiService } from './api'\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware: getDefaultMiddleware =>\r\n    getDefaultMiddleware({\r\n      thunk: {\r\n        extraArgument: myCustomApiService\r\n      }\r\n    })\r\n})\r\n\r\n// later\r\nfunction fetchUser(id) {\r\n  // The `extraArgument` is the third arg for thunk functions\r\n  return (dispatch, getState, api) => {\r\n    // you can use api here\r\n  }\r\n}\r\n```\r\n\r\nIf you need to pass in multiple values, combine them into a single object:\r\n\r\n```js\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware: getDefaultMiddleware =>\r\n    getDefaultMiddleware({\r\n      thunk: {\r\n        extraArgument: {\r\n          api: myCustomApiService,\r\n          otherValue: 42\r\n        }\r\n      }\r\n    })\r\n})\r\n\r\n// later\r\nfunction fetchUser(id) {\r\n  return (dispatch, getState, { api, otherValue }) => {\r\n    // you can use api and something else here\r\n  }\r\n}\r\n```\r\n\r\nIf you're setting up the store by hand, the named export `withExtraArgument()` function should be used to generate the correct thunk middleware:\r\n\r\n```js\r\nconst store = createStore(reducer, applyMiddleware(withExtraArgument(api)))\r\n```\r\n\r\n## Why Do I Need This?\r\n\r\nWith a plain basic Redux store, you can only do simple synchronous updates by\r\ndispatching an action. Middleware extends the store's abilities, and lets you\r\nwrite async logic that interacts with the store.\r\n\r\nThunks are the recommended middleware for basic Redux side effects logic,\r\nincluding complex synchronous logic that needs access to the store, and simple\r\nasync logic like AJAX requests.\r\n\r\nFor more details on why thunks are useful, see:\r\n\r\n- **Redux docs: Writing Logic with Thunks**  \r\n  https://redux.js.org/usage/writing-logic-thunks  \r\n  The official usage guide page on thunks. Covers why they exist, how the thunk middleware works, and useful patterns for using thunks.\r\n\r\n- **Stack Overflow: Dispatching Redux Actions with a Timeout**  \r\n  http://stackoverflow.com/questions/35411423/how-to-dispatch-a-redux-action-with-a-timeout/35415559#35415559  \r\n  Dan Abramov explains the basics of managing async behavior in Redux, walking\r\n  through a progressive series of approaches (inline async calls, async action\r\n  creators, thunk middleware).\r\n\r\n- **Stack Overflow: Why do we need middleware for async flow in Redux?**  \r\n  http://stackoverflow.com/questions/34570758/why-do-we-need-middleware-for-async-flow-in-redux/34599594#34599594  \r\n  Dan Abramov gives reasons for using thunks and async middleware, and some\r\n  useful patterns for using thunks.\r\n\r\n- **What the heck is a \"thunk\"?**  \r\n  https://daveceddia.com/what-is-a-thunk/  \r\n  A quick explanation for what the word \"thunk\" means in general, and for Redux\r\n  specifically.\r\n\r\n- **Thunks in Redux: The Basics**  \r\n  https://medium.com/fullstack-academy/thunks-in-redux-the-basics-85e538a3fe60  \r\n  A detailed look at what thunks are, what they solve, and how to use them.\r\n\r\nYou may also want to read the\r\n**[Redux FAQ entry on choosing which async middleware to use](https://redux.js.org/faq/actions#what-async-middleware-should-i-use-how-do-you-decide-between-thunks-sagas-observables-or-something-else)**.\r\n\r\nWhile the thunk middleware is not directly included with the Redux core library,\r\nit is used by default in our\r\n**[`@reduxjs/toolkit` package](https://github.com/reduxjs/redux-toolkit)**.\r\n\r\n## Motivation\r\n\r\nRedux Thunk [middleware](https://redux.js.org/tutorials/fundamentals/part-4-store#middleware)\r\nallows you to write action creators that return a function instead of an action.\r\nThe thunk can be used to delay the dispatch of an action, or to dispatch only if\r\na certain condition is met. The inner function receives the store methods\r\n`dispatch` and `getState` as parameters.\r\n\r\nAn action creator that returns a function to perform asynchronous dispatch:\r\n\r\n```js\r\nconst INCREMENT_COUNTER = 'INCREMENT_COUNTER'\r\n\r\nfunction increment() {\r\n  return {\r\n    type: INCREMENT_COUNTER\r\n  }\r\n}\r\n\r\nfunction incrementAsync() {\r\n  return dispatch => {\r\n    setTimeout(() => {\r\n      // Yay! Can invoke sync or async actions with `dispatch`\r\n      dispatch(increment())\r\n    }, 1000)\r\n  }\r\n}\r\n```\r\n\r\nAn action creator that returns a function to perform conditional dispatch:\r\n\r\n```js\r\nfunction incrementIfOdd() {\r\n  return (dispatch, getState) => {\r\n    const { counter } = getState()\r\n\r\n    if (counter % 2 === 0) {\r\n      return\r\n    }\r\n\r\n    dispatch(increment())\r\n  }\r\n}\r\n```\r\n\r\n## What’s a thunk?!\r\n\r\nA [thunk](https://en.wikipedia.org/wiki/Thunk) is a function that wraps an\r\nexpression to delay its evaluation.\r\n\r\n```js\r\n// calculation of 1 + 2 is immediate\r\n// x === 3\r\nlet x = 1 + 2\r\n\r\n// calculation of 1 + 2 is delayed\r\n// foo can be called later to perform the calculation\r\n// foo is a thunk!\r\nlet foo = () => 1 + 2\r\n```\r\n\r\nThe term [originated](https://en.wikipedia.org/wiki/Thunk#cite_note-1) as a\r\nhumorous past-tense version of \"think\".\r\n\r\n## Composition\r\n\r\nAny return value from the inner function will be available as the return value\r\nof `dispatch` itself. This is convenient for orchestrating an asynchronous\r\ncontrol flow with thunk action creators dispatching each other and returning\r\nPromises to wait for each other’s completion:\r\n\r\n```js\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport rootReducer from './reducers'\r\n\r\n// Note: this API requires redux@>=3.1.0\r\nconst store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nfunction fetchSecretSauce() {\r\n  return fetch('https://www.google.com/search?q=secret+sauce')\r\n}\r\n\r\n// These are the normal action creators you have seen so far.\r\n// The actions they return can be dispatched without any middleware.\r\n// However, they only express “facts” and not the “async flow”.\r\n\r\nfunction makeASandwich(forPerson, secretSauce) {\r\n  return {\r\n    type: 'MAKE_SANDWICH',\r\n    forPerson,\r\n    secretSauce\r\n  }\r\n}\r\n\r\nfunction apologize(fromPerson, toPerson, error) {\r\n  return {\r\n    type: 'APOLOGIZE',\r\n    fromPerson,\r\n    toPerson,\r\n    error\r\n  }\r\n}\r\n\r\nfunction withdrawMoney(amount) {\r\n  return {\r\n    type: 'WITHDRAW',\r\n    amount\r\n  }\r\n}\r\n\r\n// Even without middleware, you can dispatch an action:\r\nstore.dispatch(withdrawMoney(100))\r\n\r\n// But what do you do when you need to start an asynchronous action,\r\n// such as an API call, or a router transition?\r\n\r\n// Meet thunks.\r\n// A thunk in this context is a function that can be dispatched to perform async\r\n// activity and can dispatch actions and read state.\r\n// This is an action creator that returns a thunk:\r\nfunction makeASandwichWithSecretSauce(forPerson) {\r\n  // We can invert control here by returning a function - the \"thunk\".\r\n  // When this function is passed to `dispatch`, the thunk middleware will intercept it,\r\n  // and call it with `dispatch` and `getState` as arguments.\r\n  // This gives the thunk function the ability to run some logic, and still interact with the store.\r\n  return function (dispatch) {\r\n    return fetchSecretSauce().then(\r\n      sauce => dispatch(makeASandwich(forPerson, sauce)),\r\n      error => dispatch(apologize('The Sandwich Shop', forPerson, error))\r\n    )\r\n  }\r\n}\r\n\r\n// Thunk middleware lets me dispatch thunk async actions\r\n// as if they were actions!\r\n\r\nstore.dispatch(makeASandwichWithSecretSauce('Me'))\r\n\r\n// It even takes care to return the thunk’s return value\r\n// from the dispatch, so I can chain Promises as long as I return them.\r\n\r\nstore.dispatch(makeASandwichWithSecretSauce('My partner')).then(() => {\r\n  console.log('Done!')\r\n})\r\n\r\n// In fact I can write action creators that dispatch\r\n// actions and async actions from other action creators,\r\n// and I can build my control flow with Promises.\r\n\r\nfunction makeSandwichesForEverybody() {\r\n  return function (dispatch, getState) {\r\n    if (!getState().sandwiches.isShopOpen) {\r\n      // You don’t have to return Promises, but it’s a handy convention\r\n      // so the caller can always call .then() on async dispatch result.\r\n\r\n      return Promise.resolve()\r\n    }\r\n\r\n    // We can dispatch both plain object actions and other thunks,\r\n    // which lets us compose the asynchronous actions in a single flow.\r\n\r\n    return dispatch(makeASandwichWithSecretSauce('My Grandma'))\r\n      .then(() =>\r\n        Promise.all([\r\n          dispatch(makeASandwichWithSecretSauce('Me')),\r\n          dispatch(makeASandwichWithSecretSauce('My wife'))\r\n        ])\r\n      )\r\n      .then(() => dispatch(makeASandwichWithSecretSauce('Our kids')))\r\n      .then(() =>\r\n        dispatch(\r\n          getState().myMoney > 42\r\n            ? withdrawMoney(42)\r\n            : apologize('Me', 'The Sandwich Shop')\r\n        )\r\n      )\r\n  }\r\n}\r\n\r\n// This is very useful for server side rendering, because I can wait\r\n// until data is available, then synchronously render the app.\r\n\r\nstore\r\n  .dispatch(makeSandwichesForEverybody())\r\n  .then(() =>\r\n    response.send(ReactDOMServer.renderToString(<MyApp store={store} />))\r\n  )\r\n\r\n// I can also dispatch a thunk async action from a component\r\n// any time its props change to load the missing data.\r\n\r\nimport { connect } from 'react-redux'\r\nimport { Component } from 'react'\r\n\r\nclass SandwichShop extends Component {\r\n  componentDidMount() {\r\n    this.props.dispatch(makeASandwichWithSecretSauce(this.props.forPerson))\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.forPerson !== this.props.forPerson) {\r\n      this.props.dispatch(makeASandwichWithSecretSauce(this.props.forPerson))\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <p>{this.props.sandwiches.join('mustard')}</p>\r\n  }\r\n}\r\n\r\nexport default connect(state => ({\r\n  sandwiches: state.sandwiches\r\n}))(SandwichShop)\r\n```\r\n\r\n## License\r\n\r\nMIT\r\n",
  "readmeFilename": "README.md",
  "_id": "redux-thunk@3.1.0",
  "dist": {
    "shasum": "94b08bcdfc249c9a15c26811d92eac03ab58eaa8"
  },
  "_from": "redux-thunk@",
  "_resolved": "https://registry.npmjs.org/redux-thunk/-/redux-thunk-3.1.0.tgz"
}
